// 1. build는 프로젝트의 정보와 라이브러리 추가를 담당.

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.teamname'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

//메이븐에서 추가 라이브러리 ... 검색 해서 추가
dependencies {
    //디비 운영할 떄 반드시 사용
    //jpa(repository-sql문)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //데이터베이스 서버
    runtimeOnly 'com.h2database:h2'

    //html에 프로그래밍을 타임리프로 구현. html에서 명령어를 구현할 때...
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    //웹서비스(html)
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //메소드를 자동화 생성. (DTO, entity가 있을 때 사용) -> 없으면 수동으로 생성하면 됨~
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //개발 지원툴(자동갱신, 서버자동실행 ...)
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //모델매퍼. DTO<-->Entity 라이브러리. 안쓰면 수동으로 메소드 만들어야함.
    //제공자:라이브러리명:버전
    implementation 'org.modelmapper:modelmapper:3.1.1'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}
